{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","pages","className","cn","disabled","onClickCapture","href","map","page","active","SELECTOR_OPTIONS","items","App","useState","itemsPerPage","setItemsPerPage","setCurrentPage","firstItemIndex","lastItemIndex","visibleItems","slice","id","onChange","event","target","value","i","selected","htmlFor","item","replaceAll","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCIIG,EAA0C,SAAC,GAK9B,IAJxBC,EAIuB,EAJvBA,MACAC,EAGuB,EAHvBA,QACAC,EAEuB,EAFvBA,YACAC,EACuB,EADvBA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAC/BM,EAAQd,EAAW,EAAGW,GAE5B,OACE,qBAAII,UAAU,aAAd,UACE,oBACEA,UAAS,oBAAeC,IAAG,CACzBC,SAA0B,IAAhBR,KAEZS,eAAgB,WACM,IAAhBT,GACFC,EAAaD,EAAc,IANjC,SAUE,mBACE,UAAQ,WACRM,UAAU,YACVI,KAAI,WAAMV,GACV,gBAA+B,IAAhBA,EAJjB,oBAUDK,EAAMM,KAAI,SAAAC,GAAI,OACb,oBACEN,UAAS,oBAAeC,IAAG,CACzBM,OAAQb,IAAgBY,KAG1BH,eAAgB,WACVG,IAASZ,GACXC,EAAaW,IAPnB,SAWE,mBACE,UAAQ,WACRN,UAAU,YACVI,KAAI,WAAME,GAHZ,SAKGA,KAhBL,oBAIoBA,OAiBtB,oBACEN,UAAS,oBAAeC,IAAG,CACzBC,SAAUR,IAAgBE,KAE5BO,eAAgB,WACVT,IAAgBE,GAClBD,EAAaD,EAAc,IANjC,SAUE,mBACE,UAAQ,WACRM,UAAU,YACVI,KAAI,WAAMV,GACV,gBAAeA,IAAgBE,EAJjC,wBCpEFY,EAA6B,CAAC,EAAG,EAAG,GAAI,IAExCC,EAAQxB,EAAW,EAHL,IAIjBoB,KAAI,SAAAhB,GAAC,qBAAYA,MAEPqB,EAAgB,WAC3B,MAAwCC,mBAAiB,GAAzD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCF,mBAAiB,GAAvD,mBAAOjB,EAAP,KAAoBoB,EAApB,KASMC,GAAkBrB,EAAc,GAAKkB,EACrCI,EAAiBtB,EAAckB,EAlBnB,MAoBdlB,EAAckB,EAEZK,EAAeR,EAAMS,MAAMH,EAAgBC,GAEjD,OACE,sBAAKhB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,SACG,eAAQN,EAAR,mBAA8BqB,EAAiB,EAA/C,cAAsDC,EAAtD,kBA7BW,GA6BX,OAIH,sBAAKhB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRmB,GAAG,kBACHnB,UAAU,eACVoB,SA7BiB,SAACC,IACrBA,EAAMC,OAAOC,QAAUX,IAC1BE,EAAe,GACfD,GAAiBQ,EAAMC,OAAOC,SAsB1B,SAMGf,EAAiBH,KAAI,SAAAmB,GAAC,OACrB,wBAAQD,MAAOC,EAAGC,SAAUD,IAAMZ,EAAlC,SACGY,WAMT,uBAAOE,QAAQ,kBAAkB1B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACER,MAvDY,GAwDZC,QAASmB,EACTlB,YAAaA,EACbC,aAAcmB,IAGhB,6BACGG,EAAaZ,KAAI,SAAAsB,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,EAAKC,WAAW,IAAK,eCjEvDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e076291f.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React, { Dispatch, SetStateAction } from 'react';\nimport cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype PaginationOptions = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: Dispatch<SetStateAction<number>>,\n};\n\nexport const Pagination: React.FC<PaginationOptions> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}: PaginationOptions) => {\n  const totalPages = Math.ceil(total / perPage);\n  const pages = getNumbers(1, totalPages);\n\n  return (\n    <ul className=\"pagination\">\n      <li\n        className={`page-item ${cn({\n          disabled: currentPage === 1,\n        })}`}\n        onClickCapture={() => {\n          if (currentPage !== 1) {\n            onPageChange(currentPage - 1);\n          }\n        }}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href={`#${currentPage}`}\n          aria-disabled={currentPage === 1}\n        >\n          «\n        </a>\n      </li>\n\n      {pages.map(page => (\n        <li\n          className={`page-item ${cn({\n            active: currentPage === page,\n          })}`}\n          key={`page-item-${page}`}\n          onClickCapture={() => {\n            if (page !== currentPage) {\n              onPageChange(page);\n            }\n          }}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n\n      <li\n        className={`page-item ${cn({\n          disabled: currentPage === totalPages,\n        })}`}\n        onClickCapture={() => {\n          if (currentPage !== totalPages) {\n            onPageChange(currentPage + 1);\n          }\n        }}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href={`#${currentPage}`}\n          aria-disabled={currentPage === totalPages}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination/Pagination';\n\nconst TOTAL_ITEMS = 42;\nconst SELECTOR_OPTIONS: number[] = [3, 5, 10, 20];\n\nconst items = getNumbers(1, TOTAL_ITEMS)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [itemsPerPage, setItemsPerPage] = useState<number>(5);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n\n  const changeItemsPerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (+event.target.value !== itemsPerPage) {\n      setCurrentPage(1);\n      setItemsPerPage(+event.target.value);\n    }\n  };\n\n  const firstItemIndex = (currentPage - 1) * itemsPerPage;\n  const lastItemIndex = (currentPage * itemsPerPage > TOTAL_ITEMS\n    ? TOTAL_ITEMS\n    : currentPage * itemsPerPage);\n\n  const visibleItems = items.slice(firstItemIndex, lastItemIndex);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItemIndex + 1} - ${lastItemIndex} `\n          + `of ${TOTAL_ITEMS})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={changeItemsPerPage}\n          >\n            {SELECTOR_OPTIONS.map(i => (\n              <option value={i} selected={i === itemsPerPage}>\n                {i}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={TOTAL_ITEMS}\n        perPage={itemsPerPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {visibleItems.map(item => (\n          <li data-cy=\"item\" key={item.replaceAll(' ', '-')}>\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}